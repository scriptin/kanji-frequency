---
export interface Props {
  class?: string;
  width: number; // px
  height: number; // px
  margin: number; // px
  ranges: {
    x: [number, number]; // domain units
    y: [number, number]; // domain units
  };
  gridLines: {
    everyX: number; // domain units
    everyY: number; // domain units
    dashArray?: string; // px
  };
  ticks: {
    size: number; // px
    everyX: number; // domain units
    everyY: number; // domain units
    needsLabelAtX: (idx: number) => boolean; //
    needsLabelAtY: (idx: number) => boolean;
    labelX?: (val: number) => string; // val - domain units
    labelY?: (val: number) => string; // val - domain units
  };
  axisLabels: {
    x: string;
    y: string;
  };
  fontSize?: number; // px
}

const {
  class: className,
  width,
  height,
  margin,
  ranges,
  gridLines,
  ticks,
  axisLabels,
  fontSize = 8,
} = Astro.props;

const axisColor = 'rgb(23 23 23)'; // text-neutral-900

const xAxisPath = `M ${margin} ${height - margin} L ${width - margin} ${
  height - margin
}`;
const yAxisPath = `M ${margin} ${height - margin} L ${margin} ${margin}`;

const bgScaleLineOpacity = 0.2;
const bgScaleLineWidth = 0.75;

export function range(start: number, end: number, step: number): number[] {
  const result = [];
  for (let n = start; n <= end; n += step) {
    result.push(n);
  }
  return result;
}
---

<div class={className}>
  <svg
    width={width}
    height={height}
    viewBox={[0, 0, width, height].join(' ')}
    style="width: 100%; height: auto; height: intrinsic;"
  >
    {
      // grid lines - X/vertical
      range(...ranges.x, gridLines.everyX).map((xVal) => {
        const fromX = margin;
        const toX = width - margin;
        const rangeX = Math.abs(toX - fromX);
        const x =
          fromX + rangeX * ((xVal - ranges.x[0]) / (ranges.x[1] - ranges.x[0]));
        const gridLinePath = `M ${x} ${height - margin} L ${x} ${margin}`;
        return (
          <path
            d={gridLinePath}
            stroke={axisColor}
            stroke-width={bgScaleLineWidth}
            stroke-opacity={bgScaleLineOpacity}
            stroke-dasharray={gridLines.dashArray}
            fill="none"
          />
        );
      })
    }
    {
      // ticks - X/vertical
      range(...ranges.x, ticks.everyX).map((xVal, idx) => {
        const fromX = margin;
        const toX = width - margin;
        const rangeX = Math.abs(toX - fromX);
        const x =
          fromX + rangeX * ((xVal - ranges.x[0]) / (ranges.x[1] - ranges.x[0]));
        const tickPath = `M ${x} ${height - margin} L ${x} ${
          height - margin + ticks.size
        }`;
        const label = ticks.labelX?.(xVal) ?? xVal;
        return (
          <>
            <path
              d={tickPath}
              stroke={axisColor}
              stroke-width={1}
              stroke-opacity={1}
              fill="none"
            />
            {ticks.needsLabelAtX(idx) && (
              <text
                x={x}
                y={height - margin + fontSize + ticks.size * 1.2}
                font-size={fontSize}
                font-color={axisColor}
                text-anchor="middle"
              >
                {label}
              </text>
            )}
          </>
        );
      })
    }
    {
      // grid lines - Y/horizontal
      range(...ranges.y, gridLines.everyY).map((yVal) => {
        const fromY = height - margin;
        const toY = margin;
        const rangeY = Math.abs(toY - fromY);
        const y =
          fromY - rangeY * ((yVal - ranges.y[0]) / (ranges.y[1] - ranges.y[0]));
        const gridLinePath = `M ${margin} ${y} L ${width - margin} ${y}`;
        return (
          <path
            d={gridLinePath}
            stroke={axisColor}
            stroke-width={bgScaleLineWidth}
            stroke-opacity={bgScaleLineOpacity}
            stroke-dasharray={gridLines.dashArray}
            fill="none"
          />
        );
      })
    }
    {
      // ticks - Y/horizontal
      range(...ranges.y, ticks.everyY).map((yVal, idx) => {
        const fromY = height - margin;
        const toY = margin;
        const rangeY = Math.abs(toY - fromY);
        const y =
          fromY - rangeY * ((yVal - ranges.y[0]) / (ranges.y[1] - ranges.y[0]));
        const tickPath = `M ${margin} ${y} L ${margin - ticks.size} ${y}`;
        const label = ticks.labelY?.(yVal) ?? yVal;
        return (
          <>
            <path
              d={tickPath}
              stroke={axisColor}
              stroke-width={1}
              stroke-opacity={1}
              fill="none"
            />
            {ticks.needsLabelAtY(idx) && (
              <text
                x={margin - ticks.size * 1.6}
                y={y + fontSize * 0.4}
                font-size={fontSize}
                font-color={axisColor}
                text-anchor="end"
              >
                {label}
              </text>
            )}
          </>
        );
      })
    }
    <text
      font-size={fontSize}
      font-color={axisColor}
      x={margin}
      y={margin - fontSize * 0.5}
    >
      {axisLabels.y}
    </text>
    <text
      font-size={fontSize}
      font-color={axisColor}
      x={width / 2}
      y={height - margin + ticks.size + fontSize * 2.5}
      text-anchor="middle"
    >
      {axisLabels.x}
    </text>
    <path d={xAxisPath} stroke={axisColor} stroke-width={1} fill="none"></path>
    <path d={yAxisPath} stroke={axisColor} stroke-width={1} fill="none"></path>
    {/* no translation or scaling, must use raw coordinates */}
    <slot name="chart" />
  </svg>
  <div class="flex flex-wrap gap-x-4 gap-y-2 justify-center">
    <slot name="legend" />
  </div>
</div>
