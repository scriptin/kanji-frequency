---
import ChartBase from './ChartBase.astro';
import type { Props as ChartBaseProps } from './ChartBase.astro';
import Label from './Label.astro';
import { id } from 'src/id';

interface DataRow {
  char_count: number;
}

export interface Props extends Omit<ChartBaseProps, 'ranges'> {
  takeFirst: number;
  datasets: {
    [key: string]: {
      data: DataRow[];
      color: string;
    };
  };
}

const {
  // own
  datasets,
  takeFirst,
  // inherited
  width,
  height,
  margin,
  ...props
} = Astro.props;

function coverage(data: DataRow[], takeFirst: number): number[] {
  const total = +data[0].char_count;

  let accumulator = 0;
  return data.slice(1, 1 + takeFirst).map(({ char_count }) => {
    accumulator += +char_count;
    return accumulator / total;
  });
}

function coverageLine(
  coverage: number[],
  width: number,
  height: number,
  margin: number,
): string {
  const fromX = margin;
  const toX = width - margin;
  const rangeX = Math.abs(toX - fromX);
  const stepX = rangeX / coverage.length;

  const fromY = margin;
  const toY = height - margin;
  const rangeY = Math.abs(toY - fromY);

  return coverage
    .map((cov, index) => {
      const op = index === 0 ? 'M' : 'L';
      const x = fromX + (index + 1) * stepX;
      const y = toY - rangeY * cov;
      return `${op} ${x} ${y}`;
    })
    .join(' ');
}

// Reversed because the lines appear in this order, top to bottom
const datasetKeyLegens = Object.keys(datasets).reverse();

const baseId = id();
---

<ChartBase
  width={width}
  height={height}
  margin={margin}
  ranges={{
    x: [0, takeFirst],
    y: [0, 1],
  }}
  {...props}
>
  <Fragment slot="chart">
    {
      Object.keys(datasets).map((datasetKey) => (
        <path
          id={`${baseId}-${datasetKey}`}
          d={coverageLine(
            coverage(datasets[datasetKey].data, takeFirst),
            width,
            height,
            margin,
          )}
          stroke={datasets[datasetKey].color}
          stroke-width={1.5}
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-opacity={1}
          fill="none"
        />
      ))
    }
  </Fragment>
  <Fragment slot="legend">
    {
      datasetKeyLegens.map((datasetKey) => (
        <Label>
          <input
            type="checkbox"
            checked
            class="rounded"
            id={`${baseId}-${datasetKey}-checkbox`}
            onchange={`cumulative_coverage_toggle("${baseId}-${datasetKey}")`}
          />
          <span class="font-bold" style={{ color: datasets[datasetKey].color }}>
            &mdash;
          </span>
          <span>{datasetKey}</span>
        </Label>
      ))
    }
  </Fragment>
</ChartBase>

<script is:inline>
  function cumulative_coverage_toggle(id) {
    const checkboxId = `${id}-checkbox`;
    const checkbox = document.getElementById(checkboxId);
    const line = document.getElementById(id);
    if (checkbox.checked) {
      line.setAttribute('opacity', 1);
    } else {
      line.setAttribute('opacity', 0);
    }
  }
</script>
