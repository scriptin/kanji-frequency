---
import type {
  CharactersTableRow,
  DatesTableRow,
  DocumentsTableRow,
} from 'src/datasets';

import Table from './Table.astro';
import TableCell from './TableCell.astro';
import TableHeaderCell from './TableHeaderCell.astro';
import TableSecondaryHeaderCell from './TableSecondaryHeaderCell.astro';

export interface CharProps {
  type: 'characters';
  data: CharactersTableRow[];
}

export interface DocProps {
  type: 'documents';
  data: DocumentsTableRow[];
}

export interface DateProps {
  type: 'dates';
  data: DatesTableRow[];
}

export type CharOrDocProps = CharProps | DocProps | DateProps;

export interface Column {
  name: string;
  type: string;
  comment?: string;
}

export type Props = CharOrDocProps & {
  nRows: number;
  columns: Column[];
  class?: string;
};

const { nRows, data, columns, class: className } = Astro.props;

const rows = data.slice(0, nRows);
---

<Table class={className}>
  <thead slot="head">
    <tr>
      {
        columns.map((c) => (
          <TableHeaderCell borderBottom>{c.name}</TableHeaderCell>
        ))
      }
    </tr>
    <tr>
      {
        columns.map((c) => (
          <TableSecondaryHeaderCell class="text-xs uppercase">
            {c.type}
          </TableSecondaryHeaderCell>
        ))
      }
    </tr>
    <tr>
      {
        columns.map((c) => (
          <TableSecondaryHeaderCell borderBottom>
            {c.comment ?? ' '}
          </TableSecondaryHeaderCell>
        ))
      }
    </tr>
  </thead>
  <tbody slot="body">
    {
      rows.map((row) => (
        <tr>
          {columns.map((c) => (
            <TableCell>
              {
                row[
                  c.name as keyof (
                    | CharactersTableRow
                    | DocumentsTableRow
                    | DatesTableRow
                  )
                ]
              }
            </TableCell>
          ))}
        </tr>
      ))
    }
  </tbody>
</Table>
